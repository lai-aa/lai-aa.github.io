<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Keep exploring.]]></title>
  <link href="http://lai-aa.github.io/atom.xml" rel="self"/>
  <link href="http://lai-aa.github.io/"/>
  <updated>2015-12-29T17:11:50+08:00</updated>
  <id>http://lai-aa.github.io/</id>
  <author>
    <name><![CDATA[Allie (Ai Lei)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cassandra Concepts: Keys]]></title>
    <link href="http://lai-aa.github.io/blog/2015/12/29/cassandra-concepts-keys/"/>
    <updated>2015-12-29T14:49:39+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/12/29/cassandra-concepts-keys</id>
    <content type="html"><![CDATA[<p>cassandra 的基本概念里面有如下key：</p>

<ul>
<li>primary key</li>
<li>composite key</li>
<li>partition key</li>
<li>cluster key</li>
</ul>


<p>理解如下：</p>

<ul>
<li>primary key:

<ul>
<li>也叫 pk</li>
<li>可以是多个column的联合，这个时候可以称作 composite key</li>
<li>有时候也相当于 partition key, 当primary key 是单个column的时候</li>
</ul>
</li>
<li>partition key:

<ul>
<li>partition key 相同的所有记录都存在一个row 里面</li>
<li>partition key 相同的所有记录都在一个paritition 里面，所以说一个row 就是一个partition</li>
<li>partition key 负责索引partition，也就是说根据这个值能够知道这条记录存在哪个node 上的哪个分区。</li>
</ul>
</li>
<li>cluster key:

<ul>
<li>负责同一个分区内的记录排序</li>
</ul>
</li>
</ul>


<p>例子1:<br/>
primary key = parititon key = key<br/>
没有cluster key</p>

<pre><code>create table stackoverflow (
     key text PRIMARY KEY,
     data text      
);
</code></pre>

<p>例子2:<br/>
primary key = (key_part_one, key_part_two)<br/>
partition key = key_part_one<br/>
cluster key = key_part_two</p>

<pre><code>create table stackoverflow (
    key_part_one text,
    key_part_two int,
    data text,
    PRIMARY KEY(key_part_one, key_part_two)      
);
</code></pre>

<p>例子3:<br/>
partition key = (k_part_one,k_part_two)<br/>
cluster key = k_clust_one, k_clust_two, k_clust_three</p>

<pre><code>create table stackoverflow (
  k_part_one text,
  k_part_two int,
  k_clust_one text,
  k_clust_two int,
  k_clust_three uuid,
  data text,
  PRIMARY KEY((k_part_one,k_part_two), k_clust_one, k_clust_two, k_clust_three)      
);
</code></pre>

<p>References:</p>

<ul>
<li><a href="http://intellidzine.blogspot.hk/2014/01/cassandra-data-modelling-primary-keys.html">http://intellidzine.blogspot.hk/2014/01/cassandra-data-modelling-primary-keys.html</a></li>
<li><a href="http://stackoverflow.com/questions/24949676/difference-between-partition-key-composite-key-and-clustering-key-in-cassandra">http://stackoverflow.com/questions/24949676/difference-between-partition-key-composite-key-and-clustering-key-in-cassandra</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[带团队的三个基本]]></title>
    <link href="http://lai-aa.github.io/blog/2015/12/01/dai-tuan-dui-de-san-ge-ji-ben/"/>
    <updated>2015-12-01T16:42:59+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/12/01/dai-tuan-dui-de-san-ge-ji-ben</id>
    <content type="html"><![CDATA[<p>带一个团队做事情，如果要确保这个团队能最起码的运行起来，要确保三件事情：<br/>
1. 目标：有清晰的目标，专注点。这个目标要被大家认可，从内心深处认可，不是强加给team 的也不是谁拍脑袋想出来的。一切和这个目标相关的任务是主要任务，否则就是次要任务。有一个“把门人”对这个目标负责，不是今天某高层安排一个任务，明天另一个项目经理安排一个。<br/>
2. 职责：并不是事无巨细都要经过team lead 或 manager过手，有一些定义好的接口人负责定义好的职责，管理人员是随时抽查关键点的角色，不要身兼太多职能。<br/>
3. 流程：有了职责，再有有一个清晰的流程，这样team 才能像流水一样运行起来。管理层像检查流水线一样大体抽查某一个流程或深入抓某一些环节，不需要全面监控。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask Endpoints UT Bypass Auth - Flask UT 绕过鉴权]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/25/flask-endpoints-ut-bypass-auth-flask-ut-rao-guo-jian-quan/"/>
    <updated>2015-11-25T11:43:38+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/25/flask-endpoints-ut-bypass-auth-flask-ut-rao-guo-jian-quan</id>
    <content type="html"><![CDATA[<p>大部分Flask 应用的 Endpoint 都有Auth认证，用来保护应用的安全。那么单元测试的时候改如何绕过这些设置，专注于功能性的测试呢？</p>

<h2>对于 @login_required 保护的Endpoint：</h2>

<pre><code>@example.route("/funny", methods=["GET"])
@login_required
def get_funny():
    ...
</code></pre>

<p>在 conftest.py 里面设置一下测试用APP的配置即可，_login_disabled 可以忽略鉴权：</p>

<pre><code>@pytest.yield_fixture(scope='function')
def app_example():
    _app = example.create_app()
    _app.config['TESTING'] = True
    _app.login_manager.init_app(_app)
    _app.login_manager._login_disabled = True

    ctx = _app.test_request_context()
    ctx.push()

    yield _app

    ctx.pop()
</code></pre>

<p>然后再测试case 里面加上:</p>

<pre><code>@pytest.mark.usefixtures('app_example')
def test_auth(self):
    client = app_example.test_client()
    client.post(".....")
    assert ...
</code></pre>

<h2>对于 flask_principal 保护的Endpoint:</h2>

<pre><code>from flask.ext.principal import (Permission, RoleNeed)
permission = Permission(RoleNeed('role_string_definition'))
...

@permission.require(http_exception=401)
def get_funny():
    ...
</code></pre>

<p>在 conftest.py 里面设置 principal 相关的 mock：</p>

<pre><code>@pytest.yield_fixture(scope="function")
def principal():
    mock_principal = mock.patch('flask.ext.principal.IdentityContext.can', return_value=True)
    mock_principal.start()
    yield mock_principal
    #mock_principal.stop()


@pytest.yield_fixture(scope="function")
def identify():
    mock_identify = mock.patch('flask.ext.principal.Identity.can', return_value=True)
    mock_identify.start()
    yield mock_identify


@pytest.yield_fixture(scope="function")
def permission():
    mock_permission = mock.patch('flask.ext.principal.Permission.can', return_value=True)
    mock_permission.start()
    yield mock_permission
</code></pre>

<p>然后在测试的case里面加上这些修饰符就好了：</p>

<pre><code>@pytest.mark.usefixtures('principal', 'identify', 'permission')
def test_auth():
</code></pre>

<p>总的来说，其实就是moke 库的作用 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[毫厘与千里]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/24/hao-li-yu-qian-li/"/>
    <updated>2015-11-24T17:30:23+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/24/hao-li-yu-qian-li</id>
    <content type="html"><![CDATA[<p>灵机一动，事情找到了一种全新的方式，彻底颠覆了传统，当然值得庆贺。<br/>
大部分时候，还是按部就班，一点点向理想逼近。<br/>
不要急着颠覆，或许老方法没有彻底糟透。例如：</p>

<ul>
<li><p>中国式学校教育：少一点灌输，多一点启发。少一点应试，多一点自主。</p>

<ul>
<li>反例：学校教育放的太松，会导致走另外一种极端</li>
</ul>
</li>
<li><p>中国式家庭教育：少一点说教，多一点亲身示范。少一点急功近利，多一点顺其自然。</p>

<ul>
<li>反例：家庭的彻底放任和疏于管教</li>
</ul>
</li>
</ul>


<p>工程师的自我修养提升，何尝不是如此呢？多一点坚持，多一点循序渐进。少一点浮躁，少一点名目繁多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask + RQ]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/23/flask-plus-rq/"/>
    <updated>2015-11-23T17:29:05+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/23/flask-plus-rq</id>
    <content type="html"><![CDATA[<h3>1.Create a Queue at Flask App Level:</h3>

<pre><code>import redis
from rq import Queue

redis_host = settings.get("redis_host")
redis_port = settings.get("redis_port")
redis_db = settings.get("redis_db")
redis_url = "redis://{}:{}/{}".format(redis_host, redis_port, redis_db)
redis_connection = redis.from_url(redis_url)
redis_queue = Queue(name="my_queue", connection=redis_connection)


...
def create_app():
   ...
   app.q = redis_queue
...
</code></pre>

<h3>2. Task Enqueue:</h3>

<pre><code>app.q.enqueue(
    "os.path.isdir", s="/tmp"
)
</code></pre>

<h3>3.Create a exeution client somewhere(setting with burst make this working quit once the queue empty) :</h3>

<pre><code>def _redis_worker(self):
    redis_host = settings.get("redis_host")
    redis_port = settings.get("redis_port")
    redis_db = settings.get("redis_db")
    redis_url = "redis://{}:{}/{}".format(redis_host, redis_port, redis_db)
    redis_connection = redis.from_url(redis_url)

    listen=['my_queue']
    with Connection(redis_connection):
        worker = Worker(list(map(Queue, listen)))
        worker.work(burst=True)
</code></pre>

<h3>Can also run client with command &ldquo;rqworker&rdquo;, run help option for proper settings:</h3>

<pre><code>rqworker --help
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[磨刀不误砍柴工之python本地开发环境]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/10/mo-dao-bu-wu-kan-chai-gong-zhi-pythonben-di-kai-fa-huan-jing/"/>
    <updated>2015-11-10T17:52:36+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/10/mo-dao-bu-wu-kan-chai-gong-zhi-pythonben-di-kai-fa-huan-jing</id>
    <content type="html"><![CDATA[<p>准备好开发环境总是爽的，准备好一套本地开发环境是至关重要的。如果你要提高效率和生活质量的话。<br/>
看着一个个函数被无情的UT，代码飞速的在本地编写，内心是否有一种割草的快感呢？<br/>
对python 道上的朋友们来说，如下工具应该非常熟悉了，对于即将入坑的朋友们，可以参考以下配置：</p>

<ul>
<li>pycharm： IDE编辑器</li>
<li>virtualenv： 管理好你的python 开发库</li>
<li>dotenv： 环境变量管理器</li>
<li>boot2docker：本地跑 instance

<ul>
<li>数据库实例，如 pgsql</li>
<li>redis实例。。。</li>
</ul>
</li>
<li>pytest： UT 工具

<ul>
<li>如果有amazon 服务相关开发的话，moto库也必不可少，一条import，一个decorator 就搞定一个虚拟amazon 服务，使用起来非常方便</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[忘记年龄，不要停止对人生自身的思考]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/09/wang-ji-nian-ling-,bu-yao-ting-zhi-dui-ren-sheng-zi-shen-de-si-kao/"/>
    <updated>2015-11-09T08:32:08+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/09/wang-ji-nian-ling-,bu-yao-ting-zhi-dui-ren-sheng-zi-shen-de-si-kao</id>
    <content type="html"><![CDATA[<p>要是一说起和“人生”相关的话题，难免会有“吃饱了撑”，“矫情”，“装深沉”之嫌。拖神棍和人生大湿们的福，在天朝活的浑浑噩噩也有相当好的借口。<br/>
作为天朝教育体制下成长起来的80后，被忽略的自身探索教育，造就这一代人在而立之年还得回头重新思考这些最基本问题：在生存和初心之间平衡，在对自己负责还是对别人负责之间平衡。<br/>
毕业已经十年，后续即将迎来更多的责任和挑战，职业的发展，家庭的养护，自我的成长都是需要持续的投入和修正。社会大学的道路没有明确的对与错，说到底，又是平衡：本心，责任，享受。有的人比较能明确的找到自己的方式，有的人则比较纠结。然而纠结总要好于放弃选择，被猫扑住的老鼠也总得挣扎一番吧。<br/>
思考不等于负担，思行结合才是正道：“学而不思则惘，思而不学则怠”。作为天资普通的大众来说，想点是点，勤勉的做下去，总要好于随波逐流。<br/>
如果要总结，我的人生态度就是:</p>

<ul>
<li>不要被生活的平凡扼杀快乐的源泉</li>
<li>不要让享乐或苦难阻止探索的脚步</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样做简单和健壮的设计]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/06/zen-yang-zuo-jian-dan-he-jian-zhuang-de-she-ji/"/>
    <updated>2015-11-06T07:30:21+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/06/zen-yang-zuo-jian-dan-he-jian-zhuang-de-she-ji</id>
    <content type="html"><![CDATA[<ul>
<li>做设计之初：思考，但不要思考太多，如果有可能，要尽快有简单的框架代码。然后停止。</li>
<li>第二天上班的时候再拿过来看这段设计和代码，如果能够看得懂并且满意，那么一切ok，继续。很多情况会发现昨天的设计并不满意，那么花半天时间快速重构并继续开发。</li>
<li>第三天上班的时候继续上述过程。</li>
<li>如果持续一周能够将这个设计整体稳定下来，那么这个设计基本是比较简单和健壮的。</li>
</ul>


<h3>设计之初不要怕改，不要怕推翻，要常改，要常推翻。</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[轻松insert Json Into Database]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/26/qing-song-insert-json-into-database/"/>
    <updated>2015-10-26T23:28:34+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/26/qing-song-insert-json-into-database</id>
    <content type="html"><![CDATA[<p>大懒人时代<br/>
自从数据库开始支持json后，好多人都迅速爱上了这个数据类型。你要问为毛？答曰这个类型易扩展。。。<br/>
好吧，过分设计是很讨厌，且不要再次纠结于程序员审美的问题。<br/>
当你不得不面对插入一个json object的时候，或许能够用得上如下一行代码</p>

<pre><code>json.dumps(object)
</code></pre>

<p>细细把玩一番，这是int 型hash：</p>

<pre><code>&gt;&gt;&gt; int_dict={1:2}      
&gt;&gt;&gt; json.dumps(int_dict)
'{"1": 2}'
</code></pre>

<p>这个是string型：</p>

<pre><code>&gt;&gt;&gt; str_dict={'1':'2'}
&gt;&gt;&gt; json.dumps(str_dict)
'{"1": "2"}'
</code></pre>

<p>还有这个：</p>

<pre><code>&gt;&gt;&gt; mix_dict={'1':2}
&gt;&gt;&gt; json.dumps(mix_dict)
'{"1": 2}'
</code></pre>

<p>全文结束，哈哈</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python ORM 遇到 PGSQL 的 Before Insert Trigger]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/26/python-orm-yu-dao-pgsql-de-before-insert-trigger/"/>
    <updated>2015-10-26T17:41:54+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/26/python-orm-yu-dao-pgsql-de-before-insert-trigger</id>
    <content type="html"><![CDATA[<p>哈哈，traceback！你是不是也遇到了？<br/>
是因为<br/>
* python sqlalchemy 有时候会给session 设置 expire_on_commit<br/>
* 您的数据库表有 auto increase 的字段</p>

<p>提交一条insert 的改动以后：<br/>
* 这条记录不会马上insert 因为trigger 正在运行<br/>
* 由于设置了 expire_on_commit, return 的 obj 需要计算 auto increase 的数值并立即返回 （此处应该喝trigger 是并发的），所以出错了</p>

<p>解决方案：<br/>
1. 扔掉ORM， 用sql 语句（土）<br/>
2. 尝试禁用session 的expire_on_commit （没试，这样做会导致设计一致性问题）<br/>
2. 自行计算 auto increase 的字段值并设置 （不仅土，而且危险）<br/>
3. 禁用trigger （看来只能选1或2了 汗）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python数据分析库 Pandas]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/16/pythonshu-ju-fen-xi-ku-pandas/"/>
    <updated>2015-10-16T17:43:22+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/16/pythonshu-ju-fen-xi-ku-pandas</id>
    <content type="html"><![CDATA[<p>Pandas － 这个名字不知道哪位大哥取的，初步估计是一个胖子。<br/>
Pandas 是一个python库，用来做数据分析用的。简单看了一下，主要的应用场景应该是：<br/>
* 有一大批格式化的数据 (少量的就算了吧，太heavy)<br/>
* 相对复杂的分析处理（简单的用sql内置函数搞定就行了）</p>

<p>那么，所谓的Pandas的分析函数大概有哪些呢？<br/>
* 索引，查询类函数  （数据库功能）<br/>
* 数据分析类函数  （分析用， 废话）<br/>
* 数据分组        （数据库功能）<br/>
* 数据合并        （数据库功能）<br/>
* 时间函数         (数据库功能)<br/>
* 绘图功能        （唔，略蛋疼）<br/>
* 格式化输入输出   （Text  CSV  HDF5 &hellip;）    <br/>
* 远程数据访问      （从 Yahoo 财经和 Google Analysis 读数据）<br/>
* 丰富的编程接口 rpy2/R</p>

<p>看得出来，使用这个库就不必担心去写那些笨重的sql脚本了，而且python 比较灵活，对数据库的二次处理也非常方便。当然，更多的应用场景是结合数据库一起玩。</p>

<p>总的来说还算是一款不错的分析库，搞数据的同志们可以抽空研究一下哈。</p>

<p><a href="http://pandas.pydata.org">http://pandas.pydata.org</a>  这上面有一个简短的视频介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计师的生存法则]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/10/she-ji-shi-de-sheng-cun-fa-ze/"/>
    <updated>2015-10-10T17:58:45+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/10/she-ji-shi-de-sheng-cun-fa-ze</id>
    <content type="html"><![CDATA[<ul>
<li>A: &ldquo;I have to survive here for a week?&rdquo;</li>
<li>B: &ldquo;Anyone who can survive in New York can survive here.&rdquo;</li>
</ul>


<p>优秀的设计师不会默默无闻的埋没于任何一个地方，尤其这个信息时代。<br/>
平庸只能说明你还不够优秀。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工程师的执念]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/09/gong-cheng-shi-ying-gai-you-de-zhi-nian/"/>
    <updated>2015-10-09T17:51:39+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/09/gong-cheng-shi-ying-gai-you-de-zhi-nian</id>
    <content type="html"><![CDATA[<p>当工程师在做设计的时候，这个设计应该是完整的，各个细节和他的审美情趣一致的。<br/>
所以大多数成熟的工程师，在工作中会体现的像一个“暴君”。如果你对他的设计细节的地方吹毛求疵，会大大的得罪他。因为，在他看来，对于同样的功能，会有很多不同的设计，这些设计都能很好的实现这个功能。 <br/>
所以，“从谏如流”并不一定是一种好的品德，至少对成熟的工程师来说。保持设计的完整性和审美的一致性非常重要，设想一下那些失败的“中西合璧”的建筑设计吧。<br/>
还有，给新人提出建议的时候，应该去整体的思考，肯定他风格的部分，不要强行向自己喜好的风格转换。<br/>
当然，追求完美的设计是每一个工程师应该具备的基本品德。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 分布式同步锁设计思路学习]]></title>
    <link href="http://lai-aa.github.io/blog/2015/09/23/redis-fen-bu-shi-tong-bu-suo-she-ji-si-lu-xue-xi/"/>
    <updated>2015-09-23T17:31:09+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/09/23/redis-fen-bu-shi-tong-bu-suo-she-ji-si-lu-xue-xi</id>
    <content type="html"><![CDATA[<p>分布式应用开发的过程中经常会遇到同步锁的问题，例如：
<strong>A系统部署在多台应用服务器上，同时，需要在这些服务器上配置一些crontab任务，这些crontab任务要修改数据，所以，仅在某一台服务器运行即可，这种情况下可以使用redis的同步锁机制。</strong></p>

<pre><code>from redlock import Redlock

rlm = Redlock([{"host": redis_host, "port": redis_port},])

value = r.get(REDIS_KEY)
if value == 1:
    my_lock = rlm.lock(REDIS_KEY, 2000)
    if not my_lock:
        # Sorry, no permission, Do nothing
        return
    r.set(REDIS_KEY, 0)
    rlm.unlock(my_lock)
    # I got the permission, Do something
else:
    # Sorry, no permission, Do nothing
    return
</code></pre>

<p>这个用法是比较常见的一种场景，但是redlock背后的同步锁机制还是值得学习一下的，它的设计思路可以参考 <a href="http://redis.io/topics/distlock">Redis Dist Lock</a>,可以看到如果要设计同步锁，需要至少考虑如下方面：
1. 任何时刻，一个锁只能分配给一个client
2. 死锁避免：某一个client申请了锁但是crash掉，该锁需要自动释放
3. 高可用：只要一个Redis 主节点在，client 就能够申请和释放锁</p>

<h3>尽管redis server 本身有HA 功能，设计同步锁的时候还需要额外考虑HA</h3>

<p>比如，如下场景会引起问题：
1. Client A 向Redis Master申请锁，成功
2. Redis Master crash 掉，没有把key传输给Redis Slave
3. HA 机制将Slave promot 为新Master
4. Client B 向新的Master 申请和Client A 相同的锁，也会成功！</p>

<p>To Be Continue&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试]]></title>
    <link href="http://lai-aa.github.io/blog/2015/09/23/ce-shi/"/>
    <updated>2015-09-23T10:18:24+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/09/23/ce-shi</id>
    <content type="html"><![CDATA[<p>测试</p>
]]></content>
  </entry>
  
</feed>
