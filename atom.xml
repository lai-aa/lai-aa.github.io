<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Keep exploring.]]></title>
  <link href="http://lai-aa.github.io/atom.xml" rel="self"/>
  <link href="http://lai-aa.github.io/"/>
  <updated>2016-04-12T16:53:27+08:00</updated>
  <id>http://lai-aa.github.io/</id>
  <author>
    <name><![CDATA[Allie (Ai Lei)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[哪种boss值得追随]]></title>
    <link href="http://lai-aa.github.io/blog/2016/04/12/na-chong-bosszhi-de-zhui-sui/"/>
    <updated>2016-04-12T16:30:57+08:00</updated>
    <id>http://lai-aa.github.io/blog/2016/04/12/na-chong-bosszhi-de-zhui-sui</id>
    <content type="html"><![CDATA[<p>不知道是不是个人的错觉，总觉得在中国，择业的时候，个人选择追随的老板非常重要，有时候，甚至重要程度超过了这个行业本身，或者公司本身。因为大多数时候，人们是为老板干活而不是公司；还有，老板任命重要岗位之前，对canadates权衡技能契合度和喜欢／欣赏程度的时候，往往还是会偏向后者。</p>

<p>那么个人择业的时候，有哪些boss值得考虑呢？个人认为如下：</p>

<p>上上之选：</p>

<ul>
<li>眼界开阔，人脉广阔者：跟着牛人你也会自动变牛。</li>
<li>能授权，不猜忌者：大展拳脚的机会。</li>
<li>有热情，不安现状者：下次他创业说不定会带上你哦，不过风险比较大</li>
</ul>


<p>中等之选：</p>

<ul>
<li>升迁潜力巨大者：这个毫无疑问会给你带来鸡犬升天的几率，不过只是几率。</li>
</ul>


<p>底线之选：</p>

<ul>
<li>谦谦君子，温和大气者：混饭吃而已，找个好相处的吧</li>
</ul>


<p>如果以上条件全部不符合，那么只能呵呵了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读点经典]]></title>
    <link href="http://lai-aa.github.io/blog/2016/04/05/du-dian-jing-dian/"/>
    <updated>2016-04-05T17:29:51+08:00</updated>
    <id>http://lai-aa.github.io/blog/2016/04/05/du-dian-jing-dian</id>
    <content type="html"><![CDATA[<p>大部分人在二三十岁上就死去了，因为过了这个年龄，他们只是自己的影子，此后的余生则是在模仿自己中度过，日复一日，更机械，更装腔作势地重复他们在有生之年的所作所为，所思所想，所爱所恨。</p>

<p>——罗曼·罗兰 《约翰·克利斯朵夫》</p>

<p>你一个人在球场上，你必须独自面对和解决所有的问题，你必须控制好情绪但又必须投入情感，所有这一切多么像是生活本身。你必须坚信自己，同时又逼迫自己不断前进。</p>

<p>——阿加西自传</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cassandra 的Gossip 协议学习]]></title>
    <link href="http://lai-aa.github.io/blog/2016/03/03/cassandra-de-gossip-xie-yi-xue-xi/"/>
    <updated>2016-03-03T15:49:54+08:00</updated>
    <id>http://lai-aa.github.io/blog/2016/03/03/cassandra-de-gossip-xie-yi-xue-xi</id>
    <content type="html"><![CDATA[<p>要了解Cassandra 的Gossip 协议，首先得看一看有关Anti-Entropy 协议的一个paper：
<a href="https://s3.amazonaws.com/uploads.hipchat.com/94022/1890766/RN11BT8FKmzXtEj/flowgossip.pdf">https://s3.amazonaws.com/uploads.hipchat.com/94022/1890766/RN11BT8FKmzXtEj/flowgossip.pdf</a></p>

<p>如果嫌看洋文费劲，可以参考一下这篇：
<a href="http://www.cnblogs.com/chen77716/archive/2011/03/24/2130798.html">http://www.cnblogs.com/chen77716/archive/2011/03/24/2130798.html</a></p>

<p>若干关键点：</p>

<ul>
<li>节点通信方式: push/pull/push-pull 的优劣对比，可以参考 <a href="http://www.cnblogs.com/fxjwind/archive/2013/04/02/2995679.html">http://www.cnblogs.com/fxjwind/archive/2013/04/02/2995679.html</a>   里面更详细的论述</li>
<li>有关整体协调（Scuttlebutt Reconciliation），大部分都阐述的不是太详细，可以仔细研读一下原论文里面的相关论述和例子。其实主要是两个要点：

<ul>
<li>两个节点比较所有数据的最大版本号，如果相同，则不更新数据</li>
<li>如果需要更新数据，首先交换最小版本的数据。</li>
<li>更多有关 Scuttlebutt Reconcilation 的内容详见 <a href="http://awinterman.github.io/simple-scuttle/">http://awinterman.github.io/simple-scuttle/</a> ，还可以很形象的通过鼠标点击模拟数据交换更新。</li>
</ul>
</li>
<li>有关流控（flow control） 没有过多的学习</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工程师怎样成长]]></title>
    <link href="http://lai-aa.github.io/blog/2016/02/16/gong-cheng-shi-zen-yang-cheng-chang/"/>
    <updated>2016-02-16T11:09:16+08:00</updated>
    <id>http://lai-aa.github.io/blog/2016/02/16/gong-cheng-shi-zen-yang-cheng-chang</id>
    <content type="html"><![CDATA[<p>如果立志成为一名优秀的工程师，那么持续成长是必须的。一个工程师的成长途径主要分为如下类型：</p>

<ul>
<li>被动成长

<ul>
<li>做自己比较熟悉的项目，熟能生巧，摸索软件架构这等需要旷日持久修炼的“内力”。这类成长是工程师的基本功</li>
<li>接全新的项目，学以致用。有针对性的学习心得技术，扩展视野，综合对比。这类成长也属于必须修炼的内容，有点像武术里面的招数学习。</li>
</ul>
</li>
<li>主动成长

<ul>
<li>对自我的技术，视野，经验，持续的自省，自问，从而得出学习的目标，自我学习或参加培训。这类学习主要是得到认知类的成长。高级工程师的必修课。</li>
<li>从现有项目中主动思考，发现问题，提出方案，对比讨论，给予解决。在解决这类问题中总结经验，自我升华。这类学习得到的经验最为宝贵，就实际情况出发得到的经验，是能真正的转为已有的经验。而且这类成长不仅仅利于自己，还能提高自己的业绩。技术leader，总监们，开宗立派的大师们的必修课</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日三省吾身]]></title>
    <link href="http://lai-aa.github.io/blog/2016/02/16/ri-san-sheng-wu-shen/"/>
    <updated>2016-02-16T10:59:50+08:00</updated>
    <id>http://lai-aa.github.io/blog/2016/02/16/ri-san-sheng-wu-shen</id>
    <content type="html"><![CDATA[<p>曾子曰：“吾日三省吾身。。。”
麦肯锡管理方法也强调每天总结自我，并绘制一张图呈现</p>

<p>工程师的自我修炼就像修道，熟练固然能生巧，持续的总结，反省更为重要。
对某一个阶段来说，需要提高的集中在某1-2 件事，更能提高效率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cassandra 数据库操作注意二三事]]></title>
    <link href="http://lai-aa.github.io/blog/2016/01/13/cassandra-cha-xun-zhu-yi-er-san-shi/"/>
    <updated>2016-01-13T13:55:37+08:00</updated>
    <id>http://lai-aa.github.io/blog/2016/01/13/cassandra-cha-xun-zhu-yi-er-san-shi</id>
    <content type="html"><![CDATA[<p>从关系型数据库过渡到nosql的开发，如果您选用了cassandra，那么在做操作的时候要注意如下几点：</p>

<ul>
<li>永远别忘记db 操作的 try catch：个人感觉cassandra 相比posgresql 来讲，出错的概率要大一些，不管是 db的 读还是写。当然，出错概率这也可能与实际应用的数据并发量，cassandra集群规模有关系。</li>
<li>永远别用关键字in 去查询 partition key，效率低，出错率高</li>
<li>batch 操作（update，delete，insert）不要用在跨 partition key 的纪录上，详见：<a href="https://docs.datastax.com/en/cql/3.1/cql/cql_using/useBatch.html">https://docs.datastax.com/en/cql/3.1/cql/cql_using/useBatch.html</a></li>
<li>page query 有时候返回的是一个迭代对象而不是 list，详见上一篇</li>
<li>cqlengine 的支持还不如cql 本身完善。例如，cqlengine 查询还没有支持关键字“distinct”，而cql 的命令是支持的。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cassandra 大批量读操作]]></title>
    <link href="http://lai-aa.github.io/blog/2015/12/29/cassandra-da-pi-liang-du-cao-zuo/"/>
    <updated>2015-12-29T17:13:25+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/12/29/cassandra-da-pi-liang-du-cao-zuo</id>
    <content type="html"><![CDATA[<p>一个悲催的消息是cassandra 3.0 里面目前还不支持 fetch_size，请猛戳:<br/>
<a href="https://datastax-oss.atlassian.net/browse/PYTHON-323">https://datastax-oss.atlassian.net/browse/PYTHON-323</a><br/>
<a href="https://github.com/datastax/python-driver/pull/389">https://github.com/datastax/python-driver/pull/389</a></p>

<p>众所周知fetch_size 是全量读，分页（iteration）展示，那么cassandra 这种不建议全表扫描的数据库不支持 fetch_size 也是在情理之中的了。</p>

<p>想要用python driver 大批量／分页读取cassandra 数据的朋友们，可以用如下体位（啊不，方式）：</p>

<ul>
<li>cassandra-driver 式：<a href="https://datastax.github.io/python-driver/query_paging.html">https://datastax.github.io/python-driver/query_paging.html</a></li>
<li>cqlengine 式： <a href="http://cqlengine.readthedocs.org/en/latest/topics/queryset.html#token-function">http://cqlengine.readthedocs.org/en/latest/topics/queryset.html#token-function</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cassandra Concepts: Keys]]></title>
    <link href="http://lai-aa.github.io/blog/2015/12/29/cassandra-concepts-keys/"/>
    <updated>2015-12-29T14:49:39+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/12/29/cassandra-concepts-keys</id>
    <content type="html"><![CDATA[<p>cassandra 的基本概念里面有如下key：</p>

<ul>
<li>primary key</li>
<li>composite key</li>
<li>partition key</li>
<li>cluster key</li>
</ul>


<p>理解如下：</p>

<ul>
<li>primary key:

<ul>
<li>也叫 pk</li>
<li>可以是多个column的联合，这个时候可以称作 composite key</li>
<li>有时候也相当于 partition key, 当primary key 是单个column的时候</li>
</ul>
</li>
<li>partition key:

<ul>
<li>partition key 相同的所有记录都存在一个row 里面</li>
<li>partition key 相同的所有记录都在一个paritition 里面，所以说一个row 就是一个partition</li>
<li>partition key 负责索引partition，也就是说根据这个值能够知道这条记录存在哪个node 上的哪个分区。</li>
</ul>
</li>
<li>cluster key:

<ul>
<li>负责同一个分区内的记录排序</li>
</ul>
</li>
</ul>


<p>例子1:<br/>
primary key = parititon key = key<br/>
没有cluster key</p>

<pre><code>create table stackoverflow (
     key text PRIMARY KEY,
     data text      
);
</code></pre>

<p>例子2:<br/>
primary key = (key_part_one, key_part_two)<br/>
partition key = key_part_one<br/>
cluster key = key_part_two</p>

<pre><code>create table stackoverflow (
    key_part_one text,
    key_part_two int,
    data text,
    PRIMARY KEY(key_part_one, key_part_two)      
);
</code></pre>

<p>例子3:<br/>
partition key = (k_part_one,k_part_two)<br/>
cluster key = k_clust_one, k_clust_two, k_clust_three</p>

<pre><code>create table stackoverflow (
  k_part_one text,
  k_part_two int,
  k_clust_one text,
  k_clust_two int,
  k_clust_three uuid,
  data text,
  PRIMARY KEY((k_part_one,k_part_two), k_clust_one, k_clust_two, k_clust_three)      
);
</code></pre>

<p>References:</p>

<ul>
<li><a href="http://intellidzine.blogspot.hk/2014/01/cassandra-data-modelling-primary-keys.html">http://intellidzine.blogspot.hk/2014/01/cassandra-data-modelling-primary-keys.html</a></li>
<li><a href="http://stackoverflow.com/questions/24949676/difference-between-partition-key-composite-key-and-clustering-key-in-cassandra">http://stackoverflow.com/questions/24949676/difference-between-partition-key-composite-key-and-clustering-key-in-cassandra</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[带团队的三个基本]]></title>
    <link href="http://lai-aa.github.io/blog/2015/12/01/dai-tuan-dui-de-san-ge-ji-ben/"/>
    <updated>2015-12-01T16:42:59+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/12/01/dai-tuan-dui-de-san-ge-ji-ben</id>
    <content type="html"><![CDATA[<p>带一个团队做事情，如果要确保这个团队能最起码的运行起来，要确保三件事情：<br/>
1. 目标：有清晰的目标，专注点。这个目标要被大家认可，从内心深处认可，不是强加给team 的也不是谁拍脑袋想出来的。一切和这个目标相关的任务是主要任务，否则就是次要任务。有一个“把门人”对这个目标负责，不是今天某高层安排一个任务，明天另一个项目经理安排一个。<br/>
2. 职责：并不是事无巨细都要经过team lead 或 manager过手，有一些定义好的接口人负责定义好的职责，管理人员是随时抽查关键点的角色，不要身兼太多职能。<br/>
3. 流程：有了职责，再有有一个清晰的流程，这样team 才能像流水一样运行起来。管理层像检查流水线一样大体抽查某一个流程或深入抓某一些环节，不需要全面监控。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask Endpoints UT Bypass Auth - Flask UT 绕过鉴权]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/25/flask-endpoints-ut-bypass-auth-flask-ut-rao-guo-jian-quan/"/>
    <updated>2015-11-25T11:43:38+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/25/flask-endpoints-ut-bypass-auth-flask-ut-rao-guo-jian-quan</id>
    <content type="html"><![CDATA[<p>大部分Flask 应用的 Endpoint 都有Auth认证，用来保护应用的安全。那么单元测试的时候改如何绕过这些设置，专注于功能性的测试呢？</p>

<h2>对于 @login_required 保护的Endpoint：</h2>

<pre><code>@example.route("/funny", methods=["GET"])
@login_required
def get_funny():
    ...
</code></pre>

<p>在 conftest.py 里面设置一下测试用APP的配置即可，_login_disabled 可以忽略鉴权：</p>

<pre><code>@pytest.yield_fixture(scope='function')
def app_example():
    _app = example.create_app()
    _app.config['TESTING'] = True
    _app.login_manager.init_app(_app)
    _app.login_manager._login_disabled = True

    ctx = _app.test_request_context()
    ctx.push()

    yield _app

    ctx.pop()
</code></pre>

<p>然后再测试case 里面加上:</p>

<pre><code>@pytest.mark.usefixtures('app_example')
def test_auth(self):
    client = app_example.test_client()
    client.post(".....")
    assert ...
</code></pre>

<h2>对于 flask_principal 保护的Endpoint:</h2>

<pre><code>from flask.ext.principal import (Permission, RoleNeed)
permission = Permission(RoleNeed('role_string_definition'))
...

@permission.require(http_exception=401)
def get_funny():
    ...
</code></pre>

<p>在 conftest.py 里面设置 principal 相关的 mock：</p>

<pre><code>@pytest.yield_fixture(scope="function")
def principal():
    mock_principal = mock.patch('flask.ext.principal.IdentityContext.can', return_value=True)
    mock_principal.start()
    yield mock_principal
    #mock_principal.stop()


@pytest.yield_fixture(scope="function")
def identify():
    mock_identify = mock.patch('flask.ext.principal.Identity.can', return_value=True)
    mock_identify.start()
    yield mock_identify


@pytest.yield_fixture(scope="function")
def permission():
    mock_permission = mock.patch('flask.ext.principal.Permission.can', return_value=True)
    mock_permission.start()
    yield mock_permission
</code></pre>

<p>然后在测试的case里面加上这些修饰符就好了：</p>

<pre><code>@pytest.mark.usefixtures('principal', 'identify', 'permission')
def test_auth():
</code></pre>

<p>总的来说，其实就是moke 库的作用 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[毫厘与千里]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/24/hao-li-yu-qian-li/"/>
    <updated>2015-11-24T17:30:23+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/24/hao-li-yu-qian-li</id>
    <content type="html"><![CDATA[<p>灵机一动，事情找到了一种全新的方式，彻底颠覆了传统，当然值得庆贺。<br/>
大部分时候，还是按部就班，一点点向理想逼近。<br/>
不要急着颠覆，或许老方法没有彻底糟透。例如：</p>

<ul>
<li><p>中国式学校教育：少一点灌输，多一点启发。少一点应试，多一点自主。</p>

<ul>
<li>反例：学校教育放的太松，会导致走另外一种极端</li>
</ul>
</li>
<li><p>中国式家庭教育：少一点说教，多一点亲身示范。少一点急功近利，多一点顺其自然。</p>

<ul>
<li>反例：家庭的彻底放任和疏于管教</li>
</ul>
</li>
</ul>


<p>工程师的自我修养提升，何尝不是如此呢？多一点坚持，多一点循序渐进。少一点浮躁，少一点名目繁多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask + RQ]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/23/flask-plus-rq/"/>
    <updated>2015-11-23T17:29:05+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/23/flask-plus-rq</id>
    <content type="html"><![CDATA[<h3>1.Create a Queue at Flask App Level:</h3>

<pre><code>import redis
from rq import Queue

redis_host = settings.get("redis_host")
redis_port = settings.get("redis_port")
redis_db = settings.get("redis_db")
redis_url = "redis://{}:{}/{}".format(redis_host, redis_port, redis_db)
redis_connection = redis.from_url(redis_url)
redis_queue = Queue(name="my_queue", connection=redis_connection)


...
def create_app():
   ...
   app.q = redis_queue
...
</code></pre>

<h3>2. Task Enqueue:</h3>

<pre><code>app.q.enqueue(
    "os.path.isdir", s="/tmp"
)
</code></pre>

<h3>3.Create a exeution client somewhere(setting with burst make this working quit once the queue empty) :</h3>

<pre><code>def _redis_worker(self):
    redis_host = settings.get("redis_host")
    redis_port = settings.get("redis_port")
    redis_db = settings.get("redis_db")
    redis_url = "redis://{}:{}/{}".format(redis_host, redis_port, redis_db)
    redis_connection = redis.from_url(redis_url)

    listen=['my_queue']
    with Connection(redis_connection):
        worker = Worker(list(map(Queue, listen)))
        worker.work(burst=True)
</code></pre>

<h3>Can also run client with command &ldquo;rqworker&rdquo;, run help option for proper settings:</h3>

<pre><code>rqworker --help
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[磨刀不误砍柴工之python本地开发环境]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/10/mo-dao-bu-wu-kan-chai-gong-zhi-pythonben-di-kai-fa-huan-jing/"/>
    <updated>2015-11-10T17:52:36+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/10/mo-dao-bu-wu-kan-chai-gong-zhi-pythonben-di-kai-fa-huan-jing</id>
    <content type="html"><![CDATA[<p>准备好开发环境总是爽的，准备好一套本地开发环境是至关重要的。如果你要提高效率和生活质量的话。<br/>
看着一个个函数被无情的UT，代码飞速的在本地编写，内心是否有一种割草的快感呢？<br/>
对python 道上的朋友们来说，如下工具应该非常熟悉了，对于即将入坑的朋友们，可以参考以下配置：</p>

<ul>
<li>pycharm： IDE编辑器</li>
<li>virtualenv： 管理好你的python 开发库</li>
<li>dotenv： 环境变量管理器</li>
<li>boot2docker：本地跑 instance

<ul>
<li>数据库实例，如 pgsql</li>
<li>redis实例。。。</li>
</ul>
</li>
<li>pytest： UT 工具

<ul>
<li>如果有amazon 服务相关开发的话，moto库也必不可少，一条import，一个decorator 就搞定一个虚拟amazon 服务，使用起来非常方便</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[忘记年龄，不要停止对人生自身的思考]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/09/wang-ji-nian-ling-,bu-yao-ting-zhi-dui-ren-sheng-zi-shen-de-si-kao/"/>
    <updated>2015-11-09T08:32:08+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/09/wang-ji-nian-ling-,bu-yao-ting-zhi-dui-ren-sheng-zi-shen-de-si-kao</id>
    <content type="html"><![CDATA[<p>要是一说起和“人生”相关的话题，难免会有“吃饱了撑”，“矫情”，“装深沉”之嫌。拖神棍和人生大湿们的福，在天朝活的浑浑噩噩也有相当好的借口。<br/>
作为天朝教育体制下成长起来的80后，被忽略的自身探索教育，造就这一代人在而立之年还得回头重新思考这些最基本问题：在生存和初心之间平衡，在对自己负责还是对别人负责之间平衡。<br/>
毕业已经十年，后续即将迎来更多的责任和挑战，职业的发展，家庭的养护，自我的成长都是需要持续的投入和修正。社会大学的道路没有明确的对与错，说到底，又是平衡：本心，责任，享受。有的人比较能明确的找到自己的方式，有的人则比较纠结。然而纠结总要好于放弃选择，被猫扑住的老鼠也总得挣扎一番吧。<br/>
思考不等于负担，思行结合才是正道：“学而不思则惘，思而不学则怠”。作为天资普通的大众来说，想点是点，勤勉的做下去，总要好于随波逐流。<br/>
如果要总结，我的人生态度就是:</p>

<ul>
<li>不要被生活的平凡扼杀快乐的源泉</li>
<li>不要让享乐或苦难阻止探索的脚步</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样做简单和健壮的设计]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/06/zen-yang-zuo-jian-dan-he-jian-zhuang-de-she-ji/"/>
    <updated>2015-11-06T07:30:21+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/06/zen-yang-zuo-jian-dan-he-jian-zhuang-de-she-ji</id>
    <content type="html"><![CDATA[<ul>
<li>做设计之初：思考，但不要思考太多，如果有可能，要尽快有简单的框架代码。然后停止。</li>
<li>第二天上班的时候再拿过来看这段设计和代码，如果能够看得懂并且满意，那么一切ok，继续。很多情况会发现昨天的设计并不满意，那么花半天时间快速重构并继续开发。</li>
<li>第三天上班的时候继续上述过程。</li>
<li>如果持续一周能够将这个设计整体稳定下来，那么这个设计基本是比较简单和健壮的。</li>
</ul>


<h3>设计之初不要怕改，不要怕推翻，要常改，要常推翻。</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[轻松insert Json Into Database]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/26/qing-song-insert-json-into-database/"/>
    <updated>2015-10-26T23:28:34+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/26/qing-song-insert-json-into-database</id>
    <content type="html"><![CDATA[<p>大懒人时代<br/>
自从数据库开始支持json后，好多人都迅速爱上了这个数据类型。你要问为毛？答曰这个类型易扩展。。。<br/>
好吧，过分设计是很讨厌，且不要再次纠结于程序员审美的问题。<br/>
当你不得不面对插入一个json object的时候，或许能够用得上如下一行代码</p>

<pre><code>json.dumps(object)
</code></pre>

<p>细细把玩一番，这是int 型hash：</p>

<pre><code>&gt;&gt;&gt; int_dict={1:2}      
&gt;&gt;&gt; json.dumps(int_dict)
'{"1": 2}'
</code></pre>

<p>这个是string型：</p>

<pre><code>&gt;&gt;&gt; str_dict={'1':'2'}
&gt;&gt;&gt; json.dumps(str_dict)
'{"1": "2"}'
</code></pre>

<p>还有这个：</p>

<pre><code>&gt;&gt;&gt; mix_dict={'1':2}
&gt;&gt;&gt; json.dumps(mix_dict)
'{"1": 2}'
</code></pre>

<p>全文结束，哈哈</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python ORM 遇到 PGSQL 的 Before Insert Trigger]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/26/python-orm-yu-dao-pgsql-de-before-insert-trigger/"/>
    <updated>2015-10-26T17:41:54+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/26/python-orm-yu-dao-pgsql-de-before-insert-trigger</id>
    <content type="html"><![CDATA[<p>哈哈，traceback！你是不是也遇到了？<br/>
是因为<br/>
* python sqlalchemy 有时候会给session 设置 expire_on_commit<br/>
* 您的数据库表有 auto increase 的字段</p>

<p>提交一条insert 的改动以后：<br/>
* 这条记录不会马上insert 因为trigger 正在运行<br/>
* 由于设置了 expire_on_commit, return 的 obj 需要计算 auto increase 的数值并立即返回 （此处应该喝trigger 是并发的），所以出错了</p>

<p>解决方案：<br/>
1. 扔掉ORM， 用sql 语句（土）<br/>
2. 尝试禁用session 的expire_on_commit （没试，这样做会导致设计一致性问题）<br/>
2. 自行计算 auto increase 的字段值并设置 （不仅土，而且危险）<br/>
3. 禁用trigger （看来只能选1或2了 汗）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python数据分析库 Pandas]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/16/pythonshu-ju-fen-xi-ku-pandas/"/>
    <updated>2015-10-16T17:43:22+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/16/pythonshu-ju-fen-xi-ku-pandas</id>
    <content type="html"><![CDATA[<p>Pandas － 这个名字不知道哪位大哥取的，初步估计是一个胖子。<br/>
Pandas 是一个python库，用来做数据分析用的。简单看了一下，主要的应用场景应该是：<br/>
* 有一大批格式化的数据 (少量的就算了吧，太heavy)<br/>
* 相对复杂的分析处理（简单的用sql内置函数搞定就行了）</p>

<p>那么，所谓的Pandas的分析函数大概有哪些呢？<br/>
* 索引，查询类函数  （数据库功能）<br/>
* 数据分析类函数  （分析用， 废话）<br/>
* 数据分组        （数据库功能）<br/>
* 数据合并        （数据库功能）<br/>
* 时间函数         (数据库功能)<br/>
* 绘图功能        （唔，略蛋疼）<br/>
* 格式化输入输出   （Text  CSV  HDF5 &hellip;）    <br/>
* 远程数据访问      （从 Yahoo 财经和 Google Analysis 读数据）<br/>
* 丰富的编程接口 rpy2/R</p>

<p>看得出来，使用这个库就不必担心去写那些笨重的sql脚本了，而且python 比较灵活，对数据库的二次处理也非常方便。当然，更多的应用场景是结合数据库一起玩。</p>

<p>总的来说还算是一款不错的分析库，搞数据的同志们可以抽空研究一下哈。</p>

<p><a href="http://pandas.pydata.org">http://pandas.pydata.org</a>  这上面有一个简短的视频介绍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计师的生存法则]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/10/she-ji-shi-de-sheng-cun-fa-ze/"/>
    <updated>2015-10-10T17:58:45+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/10/she-ji-shi-de-sheng-cun-fa-ze</id>
    <content type="html"><![CDATA[<ul>
<li>A: &ldquo;I have to survive here for a week?&rdquo;</li>
<li>B: &ldquo;Anyone who can survive in New York can survive here.&rdquo;</li>
</ul>


<p>优秀的设计师不会默默无闻的埋没于任何一个地方，尤其这个信息时代。<br/>
平庸只能说明你还不够优秀。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工程师的执念]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/09/gong-cheng-shi-ying-gai-you-de-zhi-nian/"/>
    <updated>2015-10-09T17:51:39+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/09/gong-cheng-shi-ying-gai-you-de-zhi-nian</id>
    <content type="html"><![CDATA[<p>当工程师在做设计的时候，这个设计应该是完整的，各个细节和他的审美情趣一致的。<br/>
所以大多数成熟的工程师，在工作中会体现的像一个“暴君”。如果你对他的设计细节的地方吹毛求疵，会大大的得罪他。因为，在他看来，对于同样的功能，会有很多不同的设计，这些设计都能很好的实现这个功能。 <br/>
所以，“从谏如流”并不一定是一种好的品德，至少对成熟的工程师来说。保持设计的完整性和审美的一致性非常重要，设想一下那些失败的“中西合璧”的建筑设计吧。<br/>
还有，给新人提出建议的时候，应该去整体的思考，肯定他风格的部分，不要强行向自己喜好的风格转换。<br/>
当然，追求完美的设计是每一个工程师应该具备的基本品德。</p>
]]></content>
  </entry>
  
</feed>
