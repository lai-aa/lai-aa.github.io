<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Keep exploring.]]></title>
  <link href="http://lai-aa.github.io/atom.xml" rel="self"/>
  <link href="http://lai-aa.github.io/"/>
  <updated>2015-10-10T18:06:24+08:00</updated>
  <id>http://lai-aa.github.io/</id>
  <author>
    <name><![CDATA[Allie (Ai Lei)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计师的生存法则]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/10/she-ji-shi-de-sheng-cun-fa-ze/"/>
    <updated>2015-10-10T17:58:45+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/10/she-ji-shi-de-sheng-cun-fa-ze</id>
    <content type="html"><![CDATA[<ul>
<li>A: &ldquo;I have to survive here for a week?&rdquo;</li>
<li>B: &ldquo;Anyone who can survive in New York can survive here.&rdquo;</li>
</ul>


<p>优秀的设计师不会默默无闻的埋没于任何一个地方，尤其这个信息时代。<br/>
平庸只能说明你还不够优秀。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工程师的执念]]></title>
    <link href="http://lai-aa.github.io/blog/2015/10/09/gong-cheng-shi-ying-gai-you-de-zhi-nian/"/>
    <updated>2015-10-09T17:51:39+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/10/09/gong-cheng-shi-ying-gai-you-de-zhi-nian</id>
    <content type="html"><![CDATA[<p>当工程师在做设计的时候，这个设计应该是完整的，各个细节和他的审美情趣一致的。<br/>
所以大多数成熟的工程师，在工作中会体现的像一个“暴君”。如果你对他的设计细节的地方吹毛求疵，会大大的得罪他。因为，在他看来，对于同样的功能，会有很多不同的设计，这些设计都能很好的实现这个功能。 <br/>
所以，“从谏如流”并不一定是一种好的品德，至少对成熟的工程师来说。保持设计的完整性和审美的一致性非常重要，设想一下那些失败的“中西合璧”的建筑设计吧。<br/>
还有，给新人提出建议的时候，应该去整体的思考，肯定他风格的部分，不要强行向自己喜好的风格转换。<br/>
当然，追求完美的设计是每一个工程师应该具备的基本品德。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 分布式同步锁设计思路学习]]></title>
    <link href="http://lai-aa.github.io/blog/2015/09/23/redis-fen-bu-shi-tong-bu-suo-she-ji-si-lu-xue-xi/"/>
    <updated>2015-09-23T17:31:09+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/09/23/redis-fen-bu-shi-tong-bu-suo-she-ji-si-lu-xue-xi</id>
    <content type="html"><![CDATA[<p>分布式应用开发的过程中经常会遇到同步锁的问题，例如：
<strong>A系统部署在多台应用服务器上，同时，需要在这些服务器上配置一些crontab任务，这些crontab任务要修改数据，所以，仅在某一台服务器运行即可，这种情况下可以使用redis的同步锁机制。</strong></p>

<pre><code>from redlock import Redlock

rlm = Redlock([{"host": redis_host, "port": redis_port},])

value = r.get(REDIS_KEY)
if value == 1:
    my_lock = rlm.lock(REDIS_KEY, 2000)
    if not my_lock:
        # Sorry, no permission, Do nothing
        return
    r.set(REDIS_KEY, 0)
    rlm.unlock(my_lock)
    # I got the permission, Do something
else:
    # Sorry, no permission, Do nothing
    return
</code></pre>

<p>这个用法是比较常见的一种场景，但是redlock背后的同步锁机制还是值得学习一下的，它的设计思路可以参考 <a href="http://redis.io/topics/distlock">Redis Dist Lock</a>,可以看到如果要设计同步锁，需要至少考虑如下方面：
1. 任何时刻，一个锁只能分配给一个client
2. 死锁避免：某一个client申请了锁但是crash掉，该锁需要自动释放
3. 高可用：只要一个Redis 主节点在，client 就能够申请和释放锁</p>

<h3>尽管redis server 本身有HA 功能，设计同步锁的时候还需要额外考虑HA</h3>

<p>比如，如下场景会引起问题：
1. Client A 向Redis Master申请锁，成功
2. Redis Master crash 掉，没有把key传输给Redis Slave
3. HA 机制将Slave promot 为新Master
4. Client B 向新的Master 申请和Client A 相同的锁，也会成功！</p>

<p>To Be Continue&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试]]></title>
    <link href="http://lai-aa.github.io/blog/2015/09/23/ce-shi/"/>
    <updated>2015-09-23T10:18:24+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/09/23/ce-shi</id>
    <content type="html"><![CDATA[<p>测试</p>
]]></content>
  </entry>
  
</feed>
