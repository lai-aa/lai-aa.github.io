<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design-thinking | Keep exploring.]]></title>
  <link href="http://lai-aa.github.io/blog/categories/design-thinking/atom.xml" rel="self"/>
  <link href="http://lai-aa.github.io/"/>
  <updated>2015-11-23T17:46:20+08:00</updated>
  <id>http://lai-aa.github.io/</id>
  <author>
    <name><![CDATA[Allie (Ai Lei)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[怎样做简单和健壮的设计]]></title>
    <link href="http://lai-aa.github.io/blog/2015/11/06/zen-yang-zuo-jian-dan-he-jian-zhuang-de-she-ji/"/>
    <updated>2015-11-06T07:30:21+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/11/06/zen-yang-zuo-jian-dan-he-jian-zhuang-de-she-ji</id>
    <content type="html"><![CDATA[<ul>
<li>做设计之初：思考，但不要思考太多，如果有可能，要尽快有简单的框架代码。然后停止。</li>
<li>第二天上班的时候再拿过来看这段设计和代码，如果能够看得懂并且满意，那么一切ok，继续。很多情况会发现昨天的设计并不满意，那么花半天时间快速重构并继续开发。</li>
<li>第三天上班的时候继续上述过程。</li>
<li>如果持续一周能够将这个设计整体稳定下来，那么这个设计基本是比较简单和健壮的。</li>
</ul>


<h3>设计之初不要怕改，不要怕推翻，要常改，要常推翻。</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 分布式同步锁设计思路学习]]></title>
    <link href="http://lai-aa.github.io/blog/2015/09/23/redis-fen-bu-shi-tong-bu-suo-she-ji-si-lu-xue-xi/"/>
    <updated>2015-09-23T17:31:09+08:00</updated>
    <id>http://lai-aa.github.io/blog/2015/09/23/redis-fen-bu-shi-tong-bu-suo-she-ji-si-lu-xue-xi</id>
    <content type="html"><![CDATA[<p>分布式应用开发的过程中经常会遇到同步锁的问题，例如：
<strong>A系统部署在多台应用服务器上，同时，需要在这些服务器上配置一些crontab任务，这些crontab任务要修改数据，所以，仅在某一台服务器运行即可，这种情况下可以使用redis的同步锁机制。</strong></p>

<pre><code>from redlock import Redlock

rlm = Redlock([{"host": redis_host, "port": redis_port},])

value = r.get(REDIS_KEY)
if value == 1:
    my_lock = rlm.lock(REDIS_KEY, 2000)
    if not my_lock:
        # Sorry, no permission, Do nothing
        return
    r.set(REDIS_KEY, 0)
    rlm.unlock(my_lock)
    # I got the permission, Do something
else:
    # Sorry, no permission, Do nothing
    return
</code></pre>

<p>这个用法是比较常见的一种场景，但是redlock背后的同步锁机制还是值得学习一下的，它的设计思路可以参考 <a href="http://redis.io/topics/distlock">Redis Dist Lock</a>,可以看到如果要设计同步锁，需要至少考虑如下方面：
1. 任何时刻，一个锁只能分配给一个client
2. 死锁避免：某一个client申请了锁但是crash掉，该锁需要自动释放
3. 高可用：只要一个Redis 主节点在，client 就能够申请和释放锁</p>

<h3>尽管redis server 本身有HA 功能，设计同步锁的时候还需要额外考虑HA</h3>

<p>比如，如下场景会引起问题：
1. Client A 向Redis Master申请锁，成功
2. Redis Master crash 掉，没有把key传输给Redis Slave
3. HA 机制将Slave promot 为新Master
4. Client B 向新的Master 申请和Client A 相同的锁，也会成功！</p>

<p>To Be Continue&hellip;</p>
]]></content>
  </entry>
  
</feed>
